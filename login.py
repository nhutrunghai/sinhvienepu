import requests
import urllib3
from bs4 import BeautifulSoup
from time import sleep
from PIL import Image
import io
import pytesseract
import hashlib
from encrypt import encrypt
# T·∫Øt c·∫£nh b√°o SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
def requestEPU(r):
    while True:
        try:
            response = r.get('https://sinhvien.epu.edu.vn/', verify=False, timeout=10)
            sleep(2)
            if response.status_code == 200:
                print("‚úÖ REQUESTS TRANG SINH VI√äN EPU TH√ÄNH C√îNG")
                return response
        except requests.exceptions.RequestException as e:
            print(f"‚ùå REQUESTS TRANG SINH VI√äN EPU L·∫§Y THAM S·ªê TH·∫§T B·∫†I !!!")
            sleep(2)
            continue
def getLink(r):
    url_captcha = 'https://sinhvien.epu.edu.vn/ajaxpro/AjaxConfirmImage,PMT.Web.PhongDaoTao.ashx'
    headers = {
        "accept": "*/*",
        "accept-encoding": "gzip, deflate, br, zstd",
        "accept-language": "vi,vi-VN;q=0.9",
        "content-type": "text/plain; charset=UTF-8",
        "origin": "https://sinhvien.epu.edu.vn",
        "referer": "https://sinhvien.epu.edu.vn/",
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36",
        "x-ajaxpro-method": "CreateConfirmImage"
    }
    payload = "{}"
    while True:
        try:
            reponse = r.post(url_captcha, headers=headers, data=payload, verify=False, timeout=10)
            if reponse.status_code == 200:
                print("‚úÖ L·∫§Y LINK CAPTCHA V√Ä HASH MD5 TH√ÄNH C√îNG")
                return reponse
        except requests.exceptions.RequestException as e:
            print(f"‚ùå L·∫§Y LINK CAPTCHA V√Ä HASH MD5 TH·∫§T B·∫†I !!!")
            sleep(2)
            continue
def getCaptcha(r):
    result = getLink(r)
    link = result.json()['value'][0]
    captcha_hash_md5 = result.json()['value'][1]
    url_img = 'https://sinhvien.epu.edu.vn' + link
    while True:
        try:
            response = r.get(url_img, verify=False, timeout=10)
            if response.status_code == 200:
                # ƒê·ªçc ·∫£nh t·ª´ bytes b·∫±ng PIL, kh√¥ng l∆∞u file
                image = Image.open(io.BytesIO(response.content))
                # Nh·∫≠n di·ªán ch·ªØ b·∫±ng pytesseract
                text = pytesseract.image_to_string(image, config='--psm 7').strip()
                print(f"‚úÖ ƒê·ªåC CAPTCHA TH√ÄNH C√îNG: {text}")
                print(f"‚úÖ HASH MD5 CAPTCHA: {captcha_hash_md5}")
                return text, captcha_hash_md5
        except requests.exceptions.RequestException as e:
            print(f"‚ùå L·∫§Y CAPTCHA TH·∫§T B·∫†I !!!")
            sleep(2)
            continue
def summit(ma_sv, matkhau_mahoaMD5, captcha_text, captcha_hash, viewstate, viewstategen, encode_matkhau,r):
    url = "https://sinhvien.epu.edu.vn/Default.aspx"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Origin": "https://sinhvien.epu.edu.vn",
        "Referer": "https://sinhvien.epu.edu.vn/Default.aspx",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
        "Accept-Encoding": "gzip, deflate, br, zstd",
        "Accept-Language": "vi,en-US;q=0.9",
    }
    data = {
        "__EVENTTARGET": "",
        "__EVENTARGUMENT": "",
        "__LASTFOCUS": "",
        "__VIEWSTATE": viewstate,
        "__VIEWSTATEGENERATOR": viewstategen,
        "ctl00$ucPhieuKhaoSat1$RadioButtonList1": "0",
        "ctl00$DdListMenu": "-1",
        "ctl00$ucRight1$txtMaSV": ma_sv,
        "ctl00$ucRight1$txtMatKhau": encode_matkhau,
        "ctl00$ucRight1$rdSinhVien": "1",
        "ctl00$ucRight1$txtSercurityCode": captcha_text,
        "txtSecurityCodeValue": captcha_hash,
        "ctl00$ucRight1$txtEncodeMatKhau": matkhau_mahoaMD5,
        "ctl00$ucRight1$btnLogin": "ƒêƒÉng Nh·∫≠p"
    }   
    # G·ª≠i y√™u c·∫ßu ƒëƒÉng nh·∫≠p
    try:
        resp = r.post(url, headers=headers, data=data, verify=False, allow_redirects=False,timeout=10)
        return resp
    except requests.exceptions.RequestException as e:
        return None

def login(username, password):
    print("üîë ƒêANG ƒêƒÇNG NH·∫¨P V√ÄO SINH VI√äN EPU")
    print("M√£ sinh vi√™n :",username)
    print("Password :",password)
    try:
        r = requests.Session()
        while True:
            # 1. Requests ƒë·∫øn trang sinh vi√™n EPU l·∫•y c√°c tham s·ªë c∆° b·∫£n [ S·ª≠ d·ª•ng h√†m requestEPU ] .
            response = requestEPU(r)
            # 2. Th·ª±c hi·ªán t√°ch html l·∫•y c√°c tham s·ªë c·∫ßn thi·∫øt [ viewstate,viewstategen ]
            soup = BeautifulSoup(response.text, 'html.parser')
            # L·∫•y __VIEWSTATE
            viewstate = soup.find("input", {"name": "__VIEWSTATE"})
            viewstate_value = viewstate["value"] if viewstate and viewstate.has_attr("value") else None
            if viewstate_value is None:
                print("‚ùå Kh√¥ng t√¨m th·∫•y __VIEWSTATE")
                continue
            print("‚úÖ L·∫§Y ƒê∆Ø·ª¢C __VIEWSTATE")    
            # L·∫•y __VIEWSTATEGENERATOR
            viewstategen = soup.find("input", {"name": "__VIEWSTATEGENERATOR"})
            viewstategen_value = viewstategen["value"] if viewstategen and viewstategen.has_attr("value") else None
            if viewstategen_value is None:
                print("‚ùå Kh√¥ng t√¨m th·∫•y __VIEWSTATEGENERATOR")
                continue
            print("‚úÖ L·∫§Y ƒê∆Ø·ª¢C __VIEWSTATEGENERATOR")
            # 3. G·ªçi h√†m getCaptcha ƒë·ªÉ l·∫•y captcha,captcha_hash_md5
            captcha, captcha_hash_md5 = getCaptcha(r)
            #4 M√£ h√≥a password hash md5
            md5hex = hashlib.md5(password.encode()).hexdigest()
            print(f"‚úÖ M√É H√ìA PASSWORD HASH MD5 TH√ÄNH C√îNG: {md5hex}")
            ciphertext = encrypt(username,password,r)
            print(f"‚úÖ M√É H√ìA PASSWORD TH√ÄNH C√îNG: {ciphertext}")
            response = summit(username,md5hex,captcha,captcha_hash_md5,viewstate_value,viewstategen_value,ciphertext,r)
            if response.status_code == 302 and "location" in response.headers and "/HoSoSinhVien.aspx" in response.headers["location"]:
                print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                return r
            else:
                print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i")
                print("‚ùå M√£ tr·∫°ng th√°i:", response.status_code)
                
    except ValueError as e:
        print(f"Error creating session: {e}")
